[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "implodesc-backend"
dynamic = ["version"]
description = "AI-driven supply chain analysis API"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Implodesc Team" },
]
keywords = ["supply-chain", "ai", "carbon-footprint", "sustainability"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Data validation and serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    
    # AI/ML
    "openai>=1.6.0",
    "anthropic>=0.8.0",
    "tiktoken>=0.5.0",
    
    # Data processing
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    
    # Caching and session management
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    
    # HTTP client
    "httpx>=0.25.0",
    
    # Utilities
    "python-multipart>=0.0.6",  # Form data parsing
    "python-jose[cryptography]>=3.3.0",  # JWT handling
    "passlib[bcrypt]>=1.7.4",  # Password hashing
    "python-dotenv>=1.0.0",  # Environment variables
    
    # Logging and monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Task queue
    "celery[redis]>=5.3.0",
    
    # File handling
    "aiofiles>=23.2.0",
    "reportlab>=4.0.0",  # PDF generation
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For TestClient
    
    # Code quality
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.11.0",
    
    # Pre-commit hooks
    "pre-commit>=3.6.0",
    
    # Development tools
    "watchfiles>=0.21.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/implodesc/implodesc"
Documentation = "https://docs.implodesc.com"
Repository = "https://github.com/implodesc/implodesc.git"
Issues = "https://github.com/implodesc/implodesc/issues"

[tool.hatch.version]
path = "src/implodesc/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/implodesc"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]

# Black configuration
[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "tiktoken.*",
    "reportlab.*",
    "celery.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/implodesc",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/implodesc"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]